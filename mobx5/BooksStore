import { observable, computed, action, runInAction } from "mobx";

class BooksStore {
  @observable books = [];
  @observable posts = {
    data: [],
    status: "loading..."
  };

  @action addBook = book => {
    this.books.push(book);
  };

  @action createPost(post) {

    this.newAddPosts.status = "loading";
    this.createNewData(post)
      .then(posts => {
        runInAction(() => {
          this.posts.data.push(post);
          this.posts.status = "done";
        });
      })
      .catch(error => {
        runInAction(() => {
          this.posts.status = "error";
        });
      });
  }

  @action async addPosts() {
    this.posts.data = [];
    this.addPosts.status = "loading...";

    try {
      const posts = await this.getPosts();
      runInAction(() => {
        this.posts.data = posts;
        this.posts.status = "done";
      });
    } catch (error) {
      runInAction(() => {
        this.posts.status = "error";
      });
    }
  }

  @computed get numberOfBooks() {
    return this.books.length;
  }

  getPosts() {
    return fetch("https://hyf-react-api.herokuapp.com/todos").then(
      response => response.json()
    );
  }

  createNewData(post) {
    return fetch("https://jsonplaceholder.typicode.com/posts", {
      method: "POST",
      body: JSON.stringify(post),
      headers: {
        "Content-type": "application/json; charset=UTF-8"
      }
    })
      .then(response => response.json())
  }
}

const store = new BooksStore();
export default store;
